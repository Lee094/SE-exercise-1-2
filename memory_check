#!bin/bash

# memory checkup with 3 parameters

while getopts ":c:w:e:" OPTIONS; do
	case $OPTIONS in
		c) CRITICAL=$OPTARG ;;
		w) WARNING=$OPTARG ;;
		e) EMAIL=$OPTARG ;;
	esac
done

# check options if it exists, is valid and critical threshold greater than warning threshold
if [ -z "$CRITICAL" ] || ! [[ "$CRITICAL" =~ ^[0-9]+$ ]] || [ "$CRITICAL" -gt 100 ]  || [ -z "$WARNING" ] || ! [[ "$WARNING" =~ ^[0-9]+$ ]] || [ "$WARNING" -eq 0 ] || [ -z "$EMAIL" ] || ! [[ "$EMAIL" =~ ^[A-Za-z].*@[A-Za-z0-9].* ]] || [ "$CRITICAL" -le "$WARNING" ]; then
	printf "ERROR: memory_check [-c <percentage>] [-w <percentage>] [-e <email>]
Parameters are required and non-positional.
	-c <percentage>		Critical threshold.
				Must be greater than warning threshold.
				Value must not exceed 100.
	-w <percentage>		Warning threshold.
				Value must be at least greater than 0.
	-e <email>		Email address to send the report.\n"
	exit 3													# exit code for invalid input
else
	TOTAL_MEMORY=$( free | grep Mem: | awk '{ print $2 }' )
	USED_MEMORY=$( free | grep Mem: | awk '{ print $3 }' )
	TOP_PROCESSES=$( ps axo pid,comm,rss,%mem --sort -rss | head -n 11 )	# top 10 processes using the most memory based on rss
	CURRENT_TIME=$( date +%Y%m%d\ %H:%M )

	CHECK_CRITICAL=$(($CRITICAL*$TOTAL_MEMORY/100))			# critical threshold
	CHECK_WARNING=$(($WARNING*$TOTAL_MEMORY/100))			# warning threshold

	# checking
	if [ "$CHECK_CRITICAL" -le "$USED_MEMORY" ]; then
		echo "$TOP_PROCESSES" | mail -s "$CURRENT_TIME memory check - critical" $EMAIL
		exit 2												# exit code if used memory is greater than or equal to critical threshold
	elif [ "$CHECK_WARNING" -le "$USED_MEMORY" ]; then
		exit 1												# exit code if used memory is greater than or equal to warning threshold but less than the critical threshold
	else
		exit 0												# exit code if used memory is less than warning threshold
	fi
fi
